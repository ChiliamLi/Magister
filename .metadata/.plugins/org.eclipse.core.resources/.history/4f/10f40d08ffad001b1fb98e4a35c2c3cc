---------------HOW TO RUN----------------

Run the files in the Main.java method. Uncomment EITHER the randomized graph section (tied to 
concept 1) OR the hardcoded graph section (concept 2). Feel free to edit the variables
numStudents and numTutors to generate different graphs. If a red "X" appears next to the hw5 package,
try rebuilding the path and readding all of the external JARS (right-click "build path" ->
"configure build path"). 

---------------CLASS---------------------

BFS.java: This is our main BFS class that is used in other methods like Bipartite Matching 
and Closure Properties. 

---------------METHODS---------------------


public static boolean isReachable(StudentTutorGraph g, int s, int t): Returns a 
boolean value on whether two nodes of our graph are reachable from one another.

getPath: Returns the path from these two nodes of the graph using BFS if possible

---------------CLASS---------------------

BipartiteMatching.java: Uses the Ford Fulkerson algorithm to find max flow in generating 
optimal matchings

---------------METHODS---------------------

doFF: Runs FF (Ford-Fulkerson) to generate maximum matchings and returns our final residual graph 
used in getMatchings to generate all matches

getMatchings: Gets the pairings from the FF algorithm and uses the BFS class 
in order to run the FF algorithm. The basic premise of the algorithm is to augment our ending 
residual graph with our original graph to get the matchings that we obtained. The matchings 
are also printed to our console. 

---------------CLASS---------------------

ClosureProperties.java: Contains closure properties methods + other social network
properties we learned in class

---------------METHODS---------------------


ClusteringCoefficient: Calculates the clustering coefficient given input node

Focal Closure: Returns most probably focal closure

Membership Closure: Returns most probable membership closure

Triadic Closure: Checks for triadic closure (3-way clique)

---------------CLASS---------------------

Course.java: Contains the enum of courses: MATH, READING, WRITING, SCIENCE, HISTORY

---------------METHODS---------------------

---------------CLASS---------------------

Main.java: Runs all methods defined earlier: graph functions, tutor/student generation, graph 
manipulation, data matching, etc.

---------------METHODS---------------------

---------------CLASS---------------------

Student.java: Creates JSON/data for the students

---------------METHODS---------------------

There are two public student constructors that create an instance of the student class

getID: This gets the ID of the student

getName: Gets the name of the student

getGrade: Gets the grade of the student

getCourses: Gets the courses the current student is taking

getFrequency: Gets the frequency of tutoring hours that the student wants in their requested 
classes

createCourses: Creates our courses randomized based off of our Course.java

initStudents: Initializes our student Json instance

---------------CLASS---------------------

StudentTutorGraph.java: Creates the StudentTutor graph that is inputed into our 
graph manipulation functions in BipartiteMatching.java and ClosureProperties.java.

---------------METHODS---------------------


hasEdge: Returns true or false depending on if the two input vertices have edges

getStudentIndex: Get the index of the student defined in the graph

getCourseIndex: Get the index of the course defined in the graph

getTutorIndex: Get the index of the tutor defined in the graph

prettifyJSON: Formats the JSON files

writeJSON: Initiates the JSON files for the tutors and students

Init: Initiates the overall graph 

StudentTutorGraph: Initializes the student tutor graph

getSize: Returns the number of vertices in the graph

getWeight: Gets the weight of the edge specified 

setEdge: Sets the edge weight if the edge exists already

addEdge: Adds an edge if it already doesnâ€™t exist

outNeighbor: Outputs a node's list of neighbors


---------------CLASS---------------------

Tutor.java: Creates JSON data for tutors

---------------METHODS---------------------


There are two public tutor constructors that create an instance of the tutor class

getID: Gets the ID of the tutor

getName: Gets the name of the tutor

getGrade: Gets the grade of the tutor

getCourses: Gets the courses the current tutor is able to teach

getRating: Gets the rating of the tutor

getCapacity: Gets the capacity (number of students) the tutor is willing to take on

createProficiency: Greates a random proficiency level for each course

createProficientCourses: Adds the courses the tutor is proficient in a list

initStudents: Initializes our student JSON instance